<!-- Removed duplicate/invalid HTML document block -->
```
<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Due paesi, differenti immagini – Divisione Epoche</title>
  <script src="https://cdn.jsdelivr.net/npm/three@0.140.0/build/three.min.js"></script>
  <style>
    body {
      margin: 0;
      background: #0f0f0f;
      color: white;
      font-family: monospace;
      overflow: hidden;
    }

    #intro {
  position: fixed;
  top: 30%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  transition: opacity 0.6s ease;
  z-index: 10;
}

#controls {
  position: fixed;
  top: 20px;
  right: 20px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  z-index: 9999;
}

#controls button {
  background: transparent;
  color: white;
  border: 1px solid white;
  padding: 6px 12px;
  cursor: pointer;
  font-family: monospace;
  font-size: 14px;
}

#controls button:hover {
  background: white;
  color: black;
}



    h1 {
      text-align: center;
      max-width: 680px;
      margin: 3rem auto 1rem;
      font-size: 1rem;
      line-height: 1.6;
    }

    #startBtn {
      display: block;
      margin: 1rem auto;
      padding: 0.5rem 1rem;
      background: transparent;
      color: white;
      border: 1px solid white;
      cursor: pointer;
      transition: background 0.3s;
    }

    #startBtn:hover {
      background: white;
      color: black;
    }

    #intro.hidden {
      display: none;
    }

    .container {
      position: absolute;
      bottom: 140px;
      left: 0;
      width: 100vw;
      overflow: hidden;
      z-index: 5;
    }

    .scroller {
      display: flex;
      width: max-content;
      transform: translateX(0);
      will-change: transform;
    }

    .image-box {
      width: 280px;
      height: 200px;
      background: repeating-linear-gradient(45deg, #fff 0 2px, transparent 2px 6px);
      margin-right: 16px;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
    }

    .image-box.voided {
      background: none;
      border: none;
      opacity: 0.3;
    }

    .bit {
      position: absolute;
      color: white;
      opacity: 0;
      pointer-events: none;
    }

    canvas#three-canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 1;
      pointer-events: auto;
    }

    #compareControl {
  position: fixed;
  top: 20px;
  left: 20px;
  z-index: 1000;
}

#compareControl button {
  background: transparent;
  color: white;
  border: 1px solid white;
  padding: 6px 12px;
  cursor: pointer;
  font-family: monospace;
  font-size: 14px;
}

#compareControl button:hover {
  background: white;
  color: black;
}

#comparisonBox {
  position: fixed;
  top: 80%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(255, 255, 255, 0.05);
  padding: 20px;
  border-radius: 10px;
  text-align: center;
  font-family: monospace;
  color: white;
  z-index: 1000;
  backdrop-filter: blur(6px);
}

#parametri {
  margin-bottom: 10px;
}

#parametri button {
  background: transparent;
  color: white;
  border: 1px solid white;
  margin: 0 5px;
  padding: 5px 10px;
  font-size: 14px;
  cursor: pointer;
}

#parametri button:hover {
  background: white;
  color: black;
}


  </style>
</head>
<body>

<div id="intro">
  <h1>
    Sito di analisi e visualizzazione dati a partire da un archivio di immagini.<br>
    I dati sono stati estrapolati da un archivio di circa 5000 immagini che vanno dal 2017 ad oggi.<br>
    Questo lasso di tempo è diviso in due periodi: Napoli e Ticino,che rappresentano i luoghi dove ho vissuto e di conseguenza scattato le foto .<br>
    In questo sito si indaga il cambiamento del modo di scattare tra i due periodi confrontando i metadati estrapolati dalle imamgini. </h1>
  <button id="startBtn">Clicca per iniziare</button>
</div>

<div class="container">
  <div class="scroller" id="scroller">
    <script>
      for (let i = 0; i < 40; i++) {
        document.write('<div class="image-box"></div>');
      }
    </script>
  </div>
</div>

<div id="controls" style="display: none;">
  <button id="toggleItalia">Nascondi Italia</button>
  <button id="toggleSvizzera">Nascondi Svizzera</button>
</div>

<div id="compareControl" style="display: none;">
  <button id="startCompare">Inizia confronto</button>
</div>

<div id="comparisonBox" style="display: none;">
  <div id="parametri">
    <button data-param="ISO">ISO</button>
    <button data-param="BrightnessValue">Brightness</button>
    <button data-param="ExposureTime">Exposure</button>
  </div>
  <div id="confrontoTestuale">Comparazione in corso...</div>
</div>




<script>
  // Variabili globali per controllo scena
  let velocityX = 0, velocityY = 0;
  let rotX = 0, rotY = 0;
  let zoom = 1400;
  let isDragging = false;
  let lastX = 0, lastY = 0;

  const boxes = document.querySelectorAll('.image-box');
  const scroller = document.getElementById('scroller');
  const startBtn = document.getElementById('startBtn');

  let scrollPos = 0;
  let scrollSpeed = 0.5;
  let scrolling = true;

  function scrollStep() {
    if (scrolling && scrollSpeed > 0.01) {
      scrollPos -= scrollSpeed;
      scroller.style.transform = `translateX(${scrollPos}px)`;
    }
    requestAnimationFrame(scrollStep);
  }
  scrollStep();

  startBtn.addEventListener('click', () => {
    startBtn.style.display = "none";
    document.getElementById("intro").classList.add("hidden");

    const slow = setInterval(() => {
      scrollSpeed *= 0.85;
      if (scrollSpeed < 0.01) {
        clearInterval(slow);
        scrolling = false;
        triggerBitAnimation();
      }
    }, 16);
  });

  function triggerBitAnimation() {
    const centerX = window.innerWidth / 2;
    const centerY = window.innerHeight / 2;

    boxes.forEach((box) => {
      const rect = box.getBoundingClientRect();
      const isVisible = rect.right > 0 && rect.left < window.innerWidth;

      if (!isVisible) return;

      box.innerHTML = "";
      box.classList.add("voided");

      for (let i = 0; i < 20; i++) {
        const bit = document.createElement("div");
        bit.className = "bit";
        bit.textContent = Math.random() > 0.5 ? "1" : "0";

        const startX = rect.left + Math.random() * rect.width;
        const startY = rect.top + Math.random() * rect.height;

        bit.style.left = `${startX}px`;
        bit.style.top = `${startY}px`;
        bit.style.fontSize = "14px";
        bit.style.opacity = "1";
        bit.style.zIndex = "999";
        document.body.appendChild(bit);

        const dx = centerX - startX;
        const dy = centerY - startY;

        setTimeout(() => {
          bit.style.transition = "transform 1.5s ease, opacity 1.5s";
          bit.style.transform = `translate(${dx}px, ${dy}px) scale(0.7)`;
          bit.style.opacity = "0.6";

          // rimuovi dopo l'animazione
          setTimeout(() => {
            bit.remove();
          }, 1600);
        }, 200 + Math.random() * 300);

      }
    });

    setTimeout(() => {
      fetch("assets/dataset_fotografie_completo.json")
        .then(res => res.json())
        .then(json => {
          const data = Array.isArray(json) ? json : json.all;
          startThreeExplode(data);
        });
    }, 2500);
  }

  function startThreeExplode(data) {
    document.querySelector("#three-canvas")?.remove();
    const canvas = document.createElement("canvas");
    canvas.id = "three-canvas";
    document.body.appendChild(canvas);

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 3000);
    camera.position.z = zoom;

    const renderer = new THREE.WebGLRenderer({ antialias: true, canvas });
    renderer.setSize(window.innerWidth, window.innerHeight);

    const group = new THREE.Group();
    scene.add(group);

    function hexToRgb(hex) {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : { r: 255, g: 255, b: 255 };
    }

    function computeBrightness(rgb) {
      return (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;
    }

    function hexToHSL(hex) {
      const rgb = hexToRgb(hex);
      let r = rgb.r / 255, g = rgb.g / 255, b = rgb.b / 255;
      const max = Math.max(r, g, b), min = Math.min(r, g, b);
      let h, s, l = (max + min) / 2;
      if (max !== min) {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r: h = (g - b) / d + (g < b ? 6 : 0); break;
          case g: h = (b - r) / d + 2; break;
          case b: h = (r - g) / d + 4; break;
        }
        h *= 60;
      } else {
        h = s = 0;
      }
      return { h };
    }

    data.forEach(entry => {
      const color = entry.colors?.[0] || "#ffffff";
      const rgb = hexToRgb(color);
      const hsl = hexToHSL(color);
      const brightness = computeBrightness(rgb);
      const exposure = parseFloat(entry.ExposureTime) || 0.01;

      const theta = THREE.MathUtils.degToRad(hsl.h);
      const phi = brightness * Math.PI;
      const r = 200 + Math.log10(1 / (exposure + 0.0001)) * 80;

      const x = r * Math.sin(phi) * Math.cos(theta);
      const y = r * Math.cos(phi);
      const z = r * Math.sin(phi) * Math.sin(theta);

      const start = new THREE.Vector3(0, 0, 0);
      const mid = new THREE.Vector3(x / 2, y / 2, z / 2 + brightness * 40);
      const end = new THREE.Vector3(x, y, z);
      const curve = new THREE.CatmullRomCurve3([start, mid, end]);

      const geometry = new THREE.TubeGeometry(curve, 64, 1, 8, false);
      const material = new THREE.MeshBasicMaterial({ color, transparent: true, opacity: 0.6 });
      const mesh = new THREE.Mesh(geometry, material);
      mesh.scale.set(0, 0, 0);
            mesh.userData.periodo = entry.period; // ⬅️ salviamo il periodo ('italia' o 'svizzera')

      group.add(mesh);
      mesh.userData.periodo = entry.period;


      let scale = 0;
      function grow() {
        scale += 0.05;
        mesh.scale.set(scale, scale, scale);
        if (scale < 1) requestAnimationFrame(grow);
      }
      grow();
    });

    // interazione
    canvas.addEventListener('pointerdown', e => {
      isDragging = true;
      lastX = e.clientX;
      lastY = e.clientY;
    });

    canvas.addEventListener('pointermove', e => {
      if (!isDragging) return;
      velocityY += (e.clientX - lastX) * 0.005;
      velocityX += (e.clientY - lastY) * 0.005;
      lastX = e.clientX;
      lastY = e.clientY;
    });

    canvas.addEventListener('pointerup', () => isDragging = false);
    canvas.addEventListener('pointerleave', () => isDragging = false);

    canvas.addEventListener("wheel", e => {
      e.preventDefault();
      zoom += e.deltaY * 0.5;
      zoom = Math.max(200, Math.min(3000, zoom));
    }, { passive: false });

    let startDist = null;
    canvas.addEventListener('touchmove', e => {
      if (e.touches.length === 2) {
        const dx = e.touches[0].clientX - e.touches[1].clientX;
        const dy = e.touches[0].clientY - e.touches[1].clientY;
        const dist = Math.sqrt(dx * dx + dy * dy);
        if (startDist != null) {
          zoom -= (dist - startDist) * 0.5;
          zoom = Math.max(200, Math.min(3000, zoom));
        }
        startDist = dist;
        e.preventDefault();
      }
    }, { passive: false });

    canvas.addEventListener('touchend', () => startDist = null);

    function animate() {
  requestAnimationFrame(animate);

  // Interazione utente (decade)
  velocityX *= 0.9;
  velocityY *= 0.9;
  rotX += velocityX;
  rotY += velocityY;

  // Rotazione automatica lenta
  rotY += 0.0012; // puoi variare la velocità qui

  group.rotation.x = rotX;
  group.rotation.y = rotY;
  camera.position.z += (zoom - camera.position.z) * 0.1;

  renderer.render(scene, camera);
}


    animate();

    document.getElementById("controls").style.display = "flex";

let italiaVisible = true;
let svizzeraVisible = true;

document.getElementById("toggleItalia").addEventListener("click", () => {
  italiaVisible = !italiaVisible;
  group.children.forEach(mesh => {
    if (mesh.userData.periodo === "italia") {
      mesh.visible = italiaVisible;
    }
  });
  document.getElementById("toggleItalia").textContent = italiaVisible ? "Nascondi Italia" : "Mostra Italia";
});

document.getElementById("toggleSvizzera").addEventListener("click", () => {
  svizzeraVisible = !svizzeraVisible;
  group.children.forEach(mesh => {
    if (mesh.userData.periodo === "svizzera") {
      mesh.visible = svizzeraVisible;
    }
  });
  document.getElementById("toggleSvizzera").textContent = svizzeraVisible ? "Nascondi Svizzera" : "Mostra Svizzera";
});

document.getElementById("compareControl").style.display = "block";

document.getElementById("startCompare").addEventListener("click", () => {
  document.getElementById("controls").style.display = "none";
  document.getElementById("compareControl").style.display = "none";
  document.querySelector("#three-canvas")?.remove();

  // Prossimo passo: qui chiameremo la funzione per avviare la visualizzazione doppia
startCompareView(data); // passiamo i dati filtrati
});


  }

function startCompareView(data) {
  document.querySelector("#three-canvas")?.remove();
  const canvas = document.createElement("canvas");
  canvas.id = "three-canvas";
  document.body.appendChild(canvas);

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 3000);
  camera.position.z = 1400;

  const renderer = new THREE.WebGLRenderer({ antialias: true, canvas });
  renderer.setSize(window.innerWidth, window.innerHeight);

  const group = new THREE.Group();
  scene.add(group);

  const italia = data.filter(d => d.period === "italia");
  const svizzera = data.filter(d => d.period === "svizzera");

  function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : { r: 255, g: 255, b: 255 };
  }

  function computeBrightness(rgb) {
    return (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;
  }

  function hexToHSL(hex) {
    const rgb = hexToRgb(hex);
    let r = rgb.r / 255, g = rgb.g / 255, b = rgb.b / 255;
    const max = Math.max(r, g, b), min = Math.min(r, g, b);
    let h, s, l = (max + min) / 2;
    if (max !== min) {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h *= 60;
    } else {
      h = s = 0;
    }
    return { h };
  }

function createSphere(dataSet, offsetX, parametro = "tutti") {
  // Se il parametro attivo è ISO → visualizzazione con grana
  if (parametro === "ISO") {
    const isoMedio = dataSet.reduce((acc, d) => acc + (parseInt(d.ISO) || 0), 0) / dataSet.length;
const numPunti = Math.floor(Math.pow(isoMedio / 100, 3) * 1000);

    for (let i = 0; i < numPunti; i++) {
      const phi = Math.acos(2 * Math.random() - 1);
      const theta = 2 * Math.PI * Math.random();
      const r = 200;

      const x = r * Math.sin(phi) * Math.cos(theta) + offsetX;
      const y = r * Math.sin(phi) * Math.sin(theta);
      const z = r * Math.cos(phi);

      const geometry = new THREE.SphereGeometry(2, 6, 6);
      const material = new THREE.MeshBasicMaterial({ color: "#ffffff", transparent: true, opacity: 0.5 });
      const point = new THREE.Mesh(geometry, material);
      point.position.set(x, y, z);
      group.add(point);
    }

    return; // esci qui se stai disegnando grana ISO
  }

  // Visualizzazione classica con tubi
  dataSet.forEach(entry => {
    const colorHex = entry.colors?.[0] || "#aaa";
    const hsl = hexToHSL(colorHex);
    const brightness = computeBrightness(hexToRgb(colorHex));
    const exposure = parseFloat(entry.ExposureTime) || 0.01;
    const iso = parseInt(entry.ISO) || 100;

    const thickness = 0.5 + (iso / 400);
    const length = 350;

    const theta = THREE.MathUtils.degToRad(hsl.h);
    const phi = brightness * Math.PI;
    const r = length;

    const x = offsetX + r * Math.sin(phi) * Math.cos(theta);
    const y = r * Math.cos(phi);
    const z = r * Math.sin(phi) * Math.sin(theta);

    const start = new THREE.Vector3(offsetX, 0, 0);
    const mid = new THREE.Vector3((x + offsetX) / 2, y / 2, z / 2);
    const end = new THREE.Vector3(x, y, z);
    const curve = new THREE.CatmullRomCurve3([start, mid, end]);

    const geometry = new THREE.TubeGeometry(curve, 64, thickness, 8, false);
    const material = new THREE.MeshBasicMaterial({ color: "#cccccc", transparent: true, opacity: 0.8 });
    const mesh = new THREE.Mesh(geometry, material);
    group.add(mesh);
  });
}




  // inizialmente crea sfere complete (tutti i dati)
  createSphere(italia, -400);
  createSphere(svizzera, 400);

  // controllo interazione
  let rotX = 0, rotY = 0, velocityX = 0, velocityY = 0;
  let isDragging = false, lastX = 0, lastY = 0;

  canvas.addEventListener('pointerdown', e => {
    isDragging = true;
    lastX = e.clientX;
    lastY = e.clientY;
  });

  canvas.addEventListener('pointermove', e => {
    if (!isDragging) return;
    velocityY += (e.clientX - lastX) * 0.005;
    velocityX += (e.clientY - lastY) * 0.005;
    lastX = e.clientX;
    lastY = e.clientY;
  });

  canvas.addEventListener('pointerup', () => isDragging = false);
  canvas.addEventListener('pointerleave', () => isDragging = false);

  function animate() {
    requestAnimationFrame(animate);
    velocityX *= 0.9;
    velocityY *= 0.9;
    rotX += velocityX + 0.0003;
    rotY += velocityY + 0.001;
    group.rotation.x = rotX;
    group.rotation.y = rotY;
    renderer.render(scene, camera);
  }

  animate();

  // Mostra il pannello di confronto
  document.getElementById("comparisonBox").style.display = "block";

  let parametroAttivo = "tutti";

  // Funzione per aggiornare visualizzazione
  function aggiornaVisualizzazione(parametro) {
    group.clear();
    createSphere(italia, -400, parametro);
    createSphere(svizzera, 400, parametro);
  }

  // Funzione per confronto testuale
  function aggiornaConfronto(parametro) {
    const getValido = v => parametro === "ExposureTime" ? parseFloat(v) : parseInt(v);
    const media = (arr) => {
      const vals = arr.map(d => getValido(d[parametro])).filter(v => !isNaN(v));
      return vals.reduce((a, b) => a + b, 0) / vals.length;
    };

    const mediaIT = media(italia);
    const mediaCH = media(svizzera);
    const diff = mediaCH - mediaIT;
    const perc = ((diff / mediaIT) * 100).toFixed(1);
    const simbolo = diff > 0 ? "+" : "";

    document.getElementById("confrontoTestuale").textContent =
      `${parametro} medio — Italia: ${mediaIT.toFixed(2)} · Svizzera: ${mediaCH.toFixed(2)} · Δ ${simbolo}${perc}%`;
  }

  // Eventi per i pulsanti parametro
  document.querySelectorAll('#parametri button').forEach(btn => {
    btn.addEventListener('click', () => {
      parametroAttivo = btn.dataset.param;
      aggiornaConfronto(parametroAttivo);
      aggiornaVisualizzazione(parametroAttivo);
    });
  });

  // Avvia confronto iniziale senza filtro
  aggiornaConfronto("ISO"); // mostriamo confronto ISO all’inizio
} // chiusura corretta della funzione startCompareView
</script>
</body>
</html>